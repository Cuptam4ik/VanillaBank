# main.py
import discord
from discord.ext import commands
import os
import asyncio # –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è asyncio.sleep
from flask import Flask, request, jsonify # For web server communication
import threading # To run Flask in a separate thread
import logging # To suppress Flask default logging

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
TOKEN = os.getenv('DISCORD_TOKEN')
if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω DISCORD_TOKEN. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞–ª–∏ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –Ω–µ–≥–æ DISCORD_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")

TARGET_CHANNEL_ID = 1378719631853748425
TARGET_ROLE_ID = 1377644087439655153
REQUIRED_CALLER_ROLE_ID = None

# --- NEW: Configuration for Inspector Calls from Website ---
# !!! IMPORTANT: THESE ARE PLACEHOLDERS AND MUST BE CHANGED !!!
# For the "Call Inspector" feature from the website to work correctly,
# you MUST set these to the Discord Channel ID where inspector calls should go,
# and the Discord Role ID for inspectors that should be pinged.
# Using the banker's IDs here will result in inspectors being called in the banker channel
# and the banker role being pinged.
INSPECTOR_CALL_CHANNEL_ID = 1379375240366395413  # <<-- CHANGE THIS to your Inspector Call Channel ID
INSPECTOR_ROLE_ID = 1383389356592599070             # <<-- CHANGE THIS to your Inspector Role ID

# --- NEW: Secret for Bot API ---
# MUST MATCH THE SECRET IN server.js and be changed to something secure!
BOT_API_SECRET = "sk-AppXYZ-AuthToken-QWERTY12345"

# --- INTENTS SETTINGS ---
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.presences = True

bot = commands.Bot(command_prefix='!', intents=intents)

# --- Flask App for Web Server Communication ---
flask_app = Flask(__name__)
# Suppress Flask's default logging to keep console cleaner for bot logs
werkzeug_log = logging.getLogger('werkzeug')
werkzeug_log.setLevel(logging.ERROR)


# --- Synchronous Flask routes that schedule async Discord tasks ---
@flask_app.route('/call-banker-sync', methods=['POST'])
def handle_call_banker_sync():
    auth_header = request.headers.get('X-Bot-Api-Secret')
    if auth_header != BOT_API_SECRET:
        return jsonify({"error": "Unauthorized"}), 401

    data = request.json
    user_nickname = data.get('user_nickname', 'N/A')

    if not bot.is_ready():
        return jsonify({"error": "Bot is not ready"}), 503

    channel = bot.get_channel(TARGET_CHANNEL_ID)
    if not isinstance(channel, discord.TextChannel):
        print(f"Flask Sync Error: Banker channel not found or is not a text channel (ID: {TARGET_CHANNEL_ID})")
        return jsonify({"error": "Bot misconfiguration: Banker channel not found or is not a text channel."}), 500
        
    role = channel.guild.get_role(TARGET_ROLE_ID)
    if not role:
        print(f"Flask Sync Error: Banker role not found (ID: {TARGET_ROLE_ID})")
        return jsonify({"error": "Bot misconfiguration: Banker role not found."}), 500

    async def send_message():
        try:
            caller_mention = f"**{user_nickname}**"
            await channel.send(f"üö® –í–Ω–∏–º–∞–Ω–∏–µ, {role.mention}! –ë–∞–Ω–∫–∏—Ä –Ω—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! üè¶\n–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {caller_mention}")
            print(f"Flask Sync: Successfully sent banker call message from {user_nickname}")
        except Exception as e_send:
            print(f"Flask Sync Error (send banker): {e_send}")

    bot.loop.create_task(send_message())
    return jsonify({"message": "–ó–∞–ø—Ä–æ—Å –±–∞–Ω–∫–∏—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."}), 200


@flask_app.route('/call-inspector-sync', methods=['POST'])
def handle_call_inspector_sync():
    auth_header = request.headers.get('X-Bot-Api-Secret')
    if auth_header != BOT_API_SECRET:
        return jsonify({"error": "Unauthorized"}), 401

    data = request.json
    user_nickname = data.get('user_nickname', 'N/A')

    if not bot.is_ready():
        return jsonify({"error": "Bot is not ready"}), 503

    channel = bot.get_channel(INSPECTOR_CALL_CHANNEL_ID)
    if not isinstance(channel, discord.TextChannel):
        print(f"Flask Sync Error: Inspector channel not found or is not a text channel (ID: {INSPECTOR_CALL_CHANNEL_ID})")
        return jsonify({"error": "Bot misconfiguration: Inspector channel not found or is not a text channel."}), 500
    
    role = channel.guild.get_role(INSPECTOR_ROLE_ID)
    if not role:
        print(f"Flask Sync Error: Inspector role not found (ID: {INSPECTOR_ROLE_ID})")
        return jsonify({"error": "Bot misconfiguration: Inspector role not found."}), 500

    async def send_message():
        try:
            caller_mention = f"**{user_nickname}**"
            await channel.send(f"üö® –í–Ω–∏–º–∞–Ω–∏–µ, {role.mention}! –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –Ω—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! üìú\n–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {caller_mention}")
            print(f"Flask Sync: Successfully sent inspector call message from {user_nickname}")
        except Exception as e_send:
            print(f"Flask Sync Error (send inspector): {e_send}")

    bot.loop.create_task(send_message())
    return jsonify({"message": "–ó–∞–ø—Ä–æ—Å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."}), 200


# --- VIEW CLASS WITH BUTTON ---
class BankerButtonView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–í—ã–∑–≤–∞—Ç—å –±–∞–Ω–∫–∏—Ä–∞", style=discord.ButtonStyle.primary, custom_id="call_banker_button_id")
    @commands.cooldown(1, 300, commands.BucketType.user)
    async def call_banker_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer(ephemeral=True)
        guild = interaction.guild
        user = interaction.user

        if not guild or not isinstance(user, discord.Member):
            await interaction.followup.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
            return

        if REQUIRED_CALLER_ROLE_ID:
            required_role = guild.get_role(REQUIRED_CALLER_ROLE_ID)
            if not required_role:
                await interaction.followup.send(f"Bot configuration error: Cannot find required role with ID {REQUIRED_CALLER_ROLE_ID}.",ephemeral=True)
                return
            if required_role not in user.roles:
                await interaction.followup.send(f"–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ä–æ–ª–∏ ({required_role.name}) –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏.",ephemeral=True)
                return

        target_channel = guild.get_channel(TARGET_CHANNEL_ID)
        if not isinstance(target_channel, discord.TextChannel):
            await interaction.followup.send(f"Bot configuration error: Cannot find target text channel with ID {TARGET_CHANNEL_ID}.",ephemeral=True)
            return

        target_role = guild.get_role(TARGET_ROLE_ID)
        if not target_role:
            await interaction.followup.send(f"Bot configuration error: Cannot find target role with ID {TARGET_ROLE_ID}.",ephemeral=True)
            return
        try:
            await target_channel.send(f"–í–Ω–∏–º–∞–Ω–∏–µ, {target_role.mention}! –ë–∞–Ω–∫–∏—Ä –Ω—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É {user.mention}!")
            await interaction.followup.send(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {target_role.name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",ephemeral=True)
        except discord.Forbidden:
            await interaction.followup.send("–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —ç—Ç–æ–π —Ä–æ–ª–∏.",ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}",ephemeral=True)


# --- EVENT: BOT READY ---
@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Discord!')
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
    bot.add_view(BankerButtonView())
    print("–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ BankerButtonView –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    print("Flask HTTP server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5001.")


# --- SLASH COMMANDS ---
@bot.tree.command(name="banker", description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–∑–æ–≤–∞ –±–∞–Ω–∫–∏—Ä–∞.")
@commands.has_permissions(manage_channels=True)
async def call_banker_command(interaction: discord.Interaction):
    await interaction.response.send_message("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –±–∞–Ω–∫–∏—Ä—É.",view=BankerButtonView())

@bot.tree.command(name="sync", description="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞).")
@commands.is_owner()
async def sync_commands(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)
    try:
        synced = await bot.tree.sync()
        await interaction.followup.send(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥.")
    except Exception as e:
        await interaction.followup.send(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

# --- Error Handler for Slash Commands ---
@bot.tree.error
async def on_app_command_error(interaction: discord.Interaction, error: discord.app_commands.AppCommandError):
    if isinstance(error, commands.CommandOnCooldown):
        await interaction.response.send_message(f"–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {error.retry_after:.1f}—Å.",ephemeral=True)
    elif isinstance(error, commands.MissingPermissions):
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
    else:
        print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥–µ: {error}")
        if not interaction.response.is_done():
            await interaction.response.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.", ephemeral=True)

# --- Flask Server Startup ---
def run_flask():
    flask_app.run(host='0.0.0.0', port=5001)

if __name__ == '__main__':
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    try:
        bot.run(TOKEN)
    except discord.errors.LoginFailure:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Discord. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")