# main.py
import discord
from discord.ext import commands
import os
import asyncio # –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è asyncio.sleep
from flask import Flask, request, jsonify # For web server communication
import threading # To run Flask in a separate thread
import logging # To suppress Flask default logging

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
TOKEN = '' # Unchanged
TARGET_CHANNEL_ID = 1378719631853748425 # Unchanged (for banker button in Discord)
TARGET_ROLE_ID = 1377644087439655153    # Unchanged (for banker button in Discord)
REQUIRED_CALLER_ROLE_ID = None

# --- NEW: Configuration for Inspector Calls from Website ---
# !!! IMPORTANT: THESE ARE PLACEHOLDERS AND MUST BE CHANGED !!!
# For the "Call Inspector" feature from the website to work correctly,
# you MUST set these to the Discord Channel ID where inspector calls should go,
# and the Discord Role ID for inspectors that should be pinged.
# Using the banker's IDs here will result in inspectors being called in the banker channel
# and the banker role being pinged.
INSPECTOR_CALL_CHANNEL_ID = 1379375240366395413  # <<-- CHANGE THIS to your Inspector Call Channel ID
INSPECTOR_ROLE_ID = 1383389356592599070             # <<-- CHANGE THIS to your Inspector Role ID

# --- NEW: Secret for Bot API ---
# MUST MATCH THE SECRET IN server.js and be changed to something secure!
BOT_API_SECRET = "sk-AppXYZ-AuthToken-QWERTY12345"

# --- INTENTS SETTINGS ---
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.presences = True

bot = commands.Bot(command_prefix='!', intents=intents)

# --- Flask App for Web Server Communication ---
flask_app = Flask(__name__)
# Suppress Flask's default logging to keep console cleaner for bot logs
werkzeug_log = logging.getLogger('werkzeug')
werkzeug_log.setLevel(logging.ERROR)


# --- Synchronous Flask routes that schedule async Discord tasks ---
@flask_app.route('/call-banker-sync', methods=['POST'])
def handle_call_banker_sync():
    auth_header = request.headers.get('X-Bot-Api-Secret')
    if auth_header != BOT_API_SECRET:
        return jsonify({"error": "Unauthorized"}), 401

    data = request.json
    user_nickname = data.get('user_nickname', 'N/A')
    caller_id_str = data.get('caller_id', 'N/A') # This is the website User.id (string)

    if not bot.is_ready():
        return jsonify({"error": "Bot is not ready"}), 503

    banker_target_channel = bot.get_channel(TARGET_CHANNEL_ID) # Banker's specific channel
    banker_target_role = None
    guild = None

    if banker_target_channel:
        guild = banker_target_channel.guild
        if guild: banker_target_role = guild.get_role(TARGET_ROLE_ID) # Banker's specific role

    if not banker_target_channel or not banker_target_role:
        print(f"Flask Sync Error: Banker channel/role not found (Channel: {TARGET_CHANNEL_ID}, Role: {TARGET_ROLE_ID})")
        return jsonify({"error": "Bot misconfiguration: Banker channel or role not found."}), 500

    async def send_message():
        caller_mention = f"**{user_nickname}**" # Fallback to nickname
        if guild and caller_id_str != 'N/A':
            try:
                member = await guild.fetch_member(int(caller_id_str)) # Try to fetch by ID
                if member: caller_mention = f"{member.mention} (–°–∞–π—Ç: **{user_nickname}**)"
            except (discord.NotFound, ValueError, AttributeError):
                # If not found, or ID is not a valid Discord ID, or guild is None
                pass # Keep using nickname
        try:
            await banker_target_channel.send(f"üö® –í–Ω–∏–º–∞–Ω–∏–µ, {banker_target_role.mention}! –ë–∞–Ω–∫–∏—Ä –Ω—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! üè¶\n–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {caller_mention}")
            print(f"Flask Sync: Successfully sent banker call message from {user_nickname}")
        except Exception as e_send:
            print(f"Flask Sync Error (send banker): {e_send}")
            # Cannot return HTTP response from here as it's in a scheduled task

    bot.loop.create_task(send_message())
    return jsonify({"message": "–ó–∞–ø—Ä–æ—Å –±–∞–Ω–∫–∏—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."}), 200


@flask_app.route('/call-inspector-sync', methods=['POST'])
def handle_call_inspector_sync():
    auth_header = request.headers.get('X-Bot-Api-Secret')
    if auth_header != BOT_API_SECRET:
        return jsonify({"error": "Unauthorized"}), 401

    data = request.json
    user_nickname = data.get('user_nickname', 'N/A')
    caller_id_str = data.get('caller_id', 'N/A') # Website User.id

    if not bot.is_ready():
        return jsonify({"error": "Bot is not ready"}), 503

    inspector_target_channel = bot.get_channel(INSPECTOR_CALL_CHANNEL_ID) # Inspector's channel
    inspector_target_role = None
    guild = None

    if inspector_target_channel:
        guild = inspector_target_channel.guild
        if guild: inspector_target_role = guild.get_role(INSPECTOR_ROLE_ID) # Inspector's role

    if not inspector_target_channel or not inspector_target_role:
        print(f"Flask Sync Error: Inspector channel/role not found (Channel: {INSPECTOR_CALL_CHANNEL_ID}, Role: {INSPECTOR_ROLE_ID})")
        return jsonify({"error": "Bot misconfiguration: Inspector channel or role not found. Please check IDs in bot code."}), 500

    async def send_message():
        caller_mention = f"**{user_nickname}**"
        if guild and caller_id_str != 'N/A':
            try:
                member = await guild.fetch_member(int(caller_id_str))
                if member: caller_mention = f"{member.mention} (–°–∞–π—Ç: **{user_nickname}**)"
            except (discord.NotFound, ValueError, AttributeError):
                pass
        try:
            await inspector_target_channel.send(f"üö® –í–Ω–∏–º–∞–Ω–∏–µ, {inspector_target_role.mention}! –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –Ω—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! üìú\n–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {caller_mention}")
            print(f"Flask Sync: Successfully sent inspector call message from {user_nickname}")
        except Exception as e_send:
            print(f"Flask Sync Error (send inspector): {e_send}")

    bot.loop.create_task(send_message())
    return jsonify({"message": "–ó–∞–ø—Ä–æ—Å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."}), 200


# --- VIEW CLASS WITH BUTTON (Unchanged from your original) ---
class BankerButtonView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–í—ã–∑–≤–∞—Ç—å –±–∞–Ω–∫–∏—Ä–∞", style=discord.ButtonStyle.primary, custom_id="call_banker_button_id")
    @commands.cooldown(1, 300, commands.BucketType.user)
    async def call_banker_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer(ephemeral=True)
        guild = interaction.guild
        if not guild:
            await interaction.followup.send("This command can only be used on a server.", ephemeral=True)
            return

        if REQUIRED_CALLER_ROLE_ID:
            required_role = guild.get_role(REQUIRED_CALLER_ROLE_ID)
            if not required_role:
                await interaction.followup.send(
                    f"Bot configuration: Could not find the required role for calling with ID `{REQUIRED_CALLER_ROLE_ID}`.",
                    ephemeral=True
                )
                print(f"Error: Could not find the required role for calling with ID {REQUIRED_CALLER_ROLE_ID}")
                return
            if required_role not in interaction.user.roles:
                await interaction.followup.send(
                    f"You do not have the necessary role ({required_role.name}) to use this button.",
                    ephemeral=True
                )
                return

        target_channel = guild.get_channel(TARGET_CHANNEL_ID)
        if not target_channel:
            await interaction.followup.send(
                f"Error: Could not find the target channel with ID `{TARGET_CHANNEL_ID}`.",
                ephemeral=True
            )
            print(f"Error: Could not find channel with ID {TARGET_CHANNEL_ID}")
            return
        target_role = guild.get_role(TARGET_ROLE_ID)
        if not target_role:
            await interaction.followup.send(
                f"Error: Could not find the target role with ID `{TARGET_ROLE_ID}`.",
                ephemeral=True
            )
            print(f"Error: Could not find role with ID {TARGET_ROLE_ID}")
            return
        try:
            await target_channel.send(f"–í–Ω–∏–º–∞–Ω–∏–µ, {target_role.mention}! –ë–∞–Ω–∫–∏—Ä –Ω—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É {interaction.user.mention}!")
            await interaction.followup.send(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {target_role.name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {target_channel.name}. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!",
                ephemeral=True
            )
            print(f"Successfully sent message to channel {target_channel.name} mentioning role {target_role.name}")
        except discord.Forbidden:
            await interaction.followup.send(
                "–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —ç—Ç–æ–π —Ä–æ–ª–∏.",
                ephemeral=True
            )
            print(f"Error: Bot does not have permissions to send messages to channel {target_channel.name} or mention role {target_role.name}")
        except Exception as e:
            await interaction.followup.send(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}",
                ephemeral=True
            )
            print(f"Unknown error: {e}")

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        try:
            if isinstance(interaction.data, dict) and interaction.data.get('custom_id') == "call_banker_button_id":
                pass
            return True
        except commands.CommandOnCooldown as e:
            await interaction.response.send_message(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.retry_after:.0f} —Å–µ–∫—É–Ω–¥, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–Ω–æ–≤–∞ –Ω–∞–∂–∏–º–∞—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É.",
                ephemeral=True
            )
            return False
        except Exception as e:
            print(f"Error in interaction_check: {e}")
            return True


# --- EVENT: BOT READY ---
@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Discord!')
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
    bot.add_view(BankerButtonView())
    print("–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ BankerButtonView –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    print("Flask HTTP server –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ —Å —Å–∞–π—Ç–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5001 –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.")


# --- SLASH COMMAND TO SEND THE BUTTON (Unchanged) ---
@bot.tree.command(name="banker", description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–∑–æ–≤–∞ –±–∞–Ω–∫–∏—Ä–∞.")
@commands.has_permissions(manage_channels=True)
async def call_banker_command(interaction: discord.Interaction):
    await interaction.response.send_message(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –±–∞–Ω–∫–∏—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ!",
        view=BankerButtonView()
    )

# --- SLASH COMMAND TO SYNC (Unchanged) ---
@bot.tree.command(name="sync", description="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞).")
@commands.is_owner()
async def sync_commands(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)
    try:
        synced = await bot.tree.sync()
        await interaction.followup.send(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {len(synced)} –∫–æ–º–∞–Ω–¥.", ephemeral=True)
        print(f"–í–ª–∞–¥–µ–ª–µ—Ü {interaction.user} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª {len(synced)} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
    except Exception as e:
        await interaction.followup.send(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}", ephemeral=True)
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ (–≤–ª–∞–¥–µ–ª–µ—Ü): {e}")


# --- Error handler for slash commands (Unchanged) ---
@bot.tree.error
async def on_app_command_error(interaction: discord.Interaction, error: discord.app_commands.AppCommandError):
    if isinstance(error, commands.MissingPermissions):
        await interaction.response.send_message(
            "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            ephemeral=True
        )
    elif isinstance(error, commands.CommandOnCooldown):
        await interaction.response.send_message(
            f"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {error.retry_after:.0f} —Å–µ–∫—É–Ω–¥.",
            ephemeral=True
        )
    elif isinstance(error, commands.NotOwner):
        await interaction.response.send_message(
            "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.",
            ephemeral=True
        )
    else:
        await interaction.response.send_message(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {error}",
            ephemeral=True
        )
        print(f"–û—à–∏–±–∫–∞ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã: {error}")


# --- START THE BOT ---
if __name__ == "__main__":
    # Start Flask in a separate thread.
    # daemon=True ensures the thread exits when the main program (bot) exits.
    flask_thread = threading.Thread(target=lambda: flask_app.run(host='0.0.0.0', port=5001), daemon=True)
    flask_thread.start()

    bot.run(TOKEN)