// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum OperationBy {
  PLAYER
  BANK
INSPECTOR // Инспектор создает сущность Fine, а не Transaction напрямую
}

enum TransactionType {
  WITHDRAWAL
  DEPOSIT
  TRANSFER
  FINE // Для оплаты штрафа игроком
}

model User {
  id                 Int             @id @default(autoincrement())
  cardNumber         Int             @unique
  nickname           String          @unique
  password           String
  balance            Int             @default(0)
  isBanker           Boolean         @default(false)
  isAdmin            Boolean         @default(false)
  isInspector        Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  sentTransactions   Transaction[]   @relation("SenderTransactions")
  receivedTransactions Transaction[] @relation("ReceiverTransactions")
  finesIssued        Fine[]          @relation("InspectorFines") // Штрафы, выданные этим инспектором
  finesReceived      Fine[]          @relation("UserFines")      // Штрафы, полученные этим пользователем
}

model Transaction {
  id                 Int             @id @default(autoincrement())
  senderCardNumber   Int?
  receiverCardNumber Int?            // Для FINE_PAYMENT может быть null (казна) или ID конкретного счета
  amount             Int
  operationBy        OperationBy
  type               TransactionType
  createdAt          DateTime        @default(now())
  sender             User?           @relation("SenderTransactions", fields: [senderCardNumber], references: [cardNumber])
  receiver           User?           @relation("ReceiverTransactions", fields: [receiverCardNumber], references: [cardNumber])
  finePaymentForId   Int?            @unique // Связь с оплаченным штрафом
  FinePaymentFor     Fine?           @relation(fields: [finePaymentForId], references: [id])
}

model Fine {
  id                  Int           @id @default(autoincrement())
  userId              Int           // ID пользователя, которому выписан штраф
  user                User          @relation("UserFines", fields: [userId], references: [id])
  issuedByInspectorId Int           // ID инспектора, который выписал штраф
  inspector           User          @relation("InspectorFines", fields: [issuedByInspectorId], references: [id])
  amount              Int
  reason              String?
  createdAt           DateTime      @default(now())
  dueDate             DateTime      // Срок оплаты штрафа
  isPaid              Boolean       @default(false)
  paidAt              DateTime?
  paymentTransaction  Transaction?  // Транзакция, которой был оплачен штраф (связь через finePaymentForId в Transaction)
}